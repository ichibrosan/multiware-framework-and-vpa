////////////////////////////////////////////////////////////////////
// ~/public_html/fw/schemaCompiler.h 2025-07-16 08:08 dwg -       //
// This file is part of MultiWare Engineering's VPA and FrameWork //
////////////////////////////////////////////////////////////////////

#pragma once

#include "mwfw2.h"

/**
 * The `schemaCompiler` class is responsible for processing schema-related data
 * from a given CSV file, performing validation and type-related checks, and
 * generating schema headers in a structured format. It includes methods for
 * schema manipulation and properties linked to schema characteristics.
 */
class schemaCompiler
{
	/**
	 * @brief Represents the total number of lines processed or available
	 *        in the associated schema file.
	 *
	 * This variable stores the count of rows or lines fetched, typically
	 * from a CSV file or schema file during operations such as schema
	 * compilation. It is utilized in iterations or as a boundary for row
	 * processing.
	 */
	int m_iLines;
	/**
	 * Represents the current row index being processed or referenced within the
	 * schemaCompiler class.
	 *
	 * This variable typically functions as a zero-based index to track or manage
	 * processing operations in a tabular or sequential data structure context.
	 */
	int m_iRow;
	/**
	 * Stores the offset of the last period character encountered during processing.
	 *
	 * This variable is used internally to keep track of positioning information
	 * within strings, typically to identify substrings based on the last period's
	 * location. It aids in schema parsing or filename manipulation tasks that
	 * require splitting or tokenizing based on period delimiters.
	 */
	std::size_t m_lastPeriodOffset;
	/**
	 * @brief Stores the schema name for use in the schemaCompiler class.
	 *
	 * This variable holds the name of the schema passed to the `schemaCompiler`
	 * during its initialization or operations. It is used to identify and process
	 * a specific schema, including the creation of file paths or interactions with
	 * instances of the `readCsv` class.
	 */
	std::string m_ssSN;
	/**
	 * @brief Stores the header file name generated for the schema being compiled.
	 *
	 * This member variable contains the path to the header file
	 * generated by the `createHeaderFileName` function. The file
	 * name is dynamically constructed based on the schema name,
	 * and its extension is replaced with `.hh`. The generated header
	 * file path is essential for facilitating further schema operations
	 * such as file writing and schema validation.
	 */
	std::string m_ssHFN;
	/**
	 * @brief Stores the file path and file name without the file type extension.
	 *
	 * This variable holds the path and file name with the type extension removed.
	 * It is useful when operating on file paths where the type needs to be
	 * determined or changed, or for constructing paths dynamically without
	 * a predefined file type.
	 */
	std::string m_ssPathFNsansType;
	/**
	 * @brief Fully qualified file system path to the header file
	 *        generated by the schemaCompiler.
	 *
	 * This variable stores the complete file system path, including
	 * filename and extension, to the header file that is generated
	 * during the schema compilation process. It is utilized as the
	 * target path for the output header file and includes relevant
	 * information such as the schema name and timestamp.
	 *
	 * @details This string is dynamically constructed based on the
	 *          provided schema name and file path logic and is used
	 *          in conjunction with methods such as createHeaderFileName.
	 */
	std::string m_ssHeaderFQFS;
	/**
	 * @brief Pointer to an instance of the `readCsv` class for managing CSV operations.
	 *
	 * This member variable holds a pointer to a `readCsv` object, which is responsible
	 * for handling the reading, parsing, and manipulation of CSV data. It provides
	 * the functionality needed to process CSV files within the context of the `schemaCompiler`
	 * class.
	 *
	 * Usage:
	 * - Allows access to methods and functions of the `readCsv` class for handling CSV data.
	 * - Facilitates integration of CSV parsing and data retrieval functionalities.
	 *
	 * Ownership:
	 * - The ownership and lifecycle of the `readCsv` instance may be managed outside or inside
	 *   the `schemaCompiler` class, depending on the implementation.
	 */
	readCsv* m_pCsv;

public:
	/**
	 * Constructor for the schemaCompiler class. Initializes the schema compiler
	 * with the given schema name and debug mode. This method performs operations
	 * such as retrieving the schema, validating its version, creating header
	 * files, and writing structures to an output file. It ensures proper handling
	 * when the schema is either inactive or of incorrect version.
	 *
	 * @param ssSchemaName The name of the schema to be compiled.
	 * @param bDebug A boolean flag that indicates if debug mode is enabled or disabled.
	 * @return void
	 */
	schemaCompiler(std::string ssSchemaName, bool bDebug);

	/**
	 * Creates the file name for a header file associated with the schema.
	 * The file name is constructed based on the schema name, adjusted to
	 * conform to the proper path and extension.
	 *
	 * @param bDebug Indicates whether the program is running in debug mode.
	 *               Debug mode may affect the logic of file name creation or
	 *               logging, though it is not explicitly handled in this method.
	 */
	void createHeaderFileName(bool bDebug);
	/**
	 * Retrieves and processes the schema data based on the provided schema name.
	 * Initializes a readCsv object to parse the data and updates internal state.
	 *
	 * @param ssSchemaName The name of the schema file to be processed.
	 */
	void getSchema(std::string);
	/**
	 * Checks whether the current schema is marked as active.
	 *
	 * This method evaluates metadata from the parsed CSV data to determine
	 * if the schema is flagged as active. It retrieves the value of the
	 * corresponding "active" column in the schema metadata and compares it
	 * against the expected "true" value.
	 *
	 * @return true if the schema is active, false otherwise.
	 */
	bool isActiveSchema();
	/**
	 * Checks if the schema version is valid by comparing the schema's meta version
	 * field with the expected version "1".
	 *
	 * @return true if the schema version matches "1"; false otherwise.
	 */
	bool isValidSchemaVersion();
	/**
	 * Determines if the specified row in the CSV data is active.
	 *
	 * A row is considered active if the value in the "COL_ACTIVE" column
	 * of the specified row is equal to the string "true".
	 *
	 * @param iRow The index of the row to check in the parsed CSV data.
	 * @return True if the row is active, false otherwise.
	 */
	bool isRowActive(int);
	/**
	 * Determines if the type of the specified row corresponds to "postcheckbox".
	 *
	 * @param iRow The row index in the parsed CSV data to check for the "postcheckbox" type.
	 * @return True if the type of the specified row is "postcheckbox", otherwise false.
	 */
	bool isTypePostCheckbox(int);
	/**
	 * Checks whether the specified row corresponds to a type "precheckbox" in the schema.
	 *
	 * @param iRow The index of the row to be checked.
	 * @return True if the row type is "precheckbox", otherwise false.
	 */
	bool isTypePreCheckbox(int);
	/**
	 * Checks whether the specified row corresponds to a type 'image' in the schema data.
	 *
	 * The method examines the parsed CSV data to determine if the type associated
	 * with the given row index is "image". It returns true if the type is "image",
	 * otherwise false.
	 *
	 * @param iRow The index of the row in the parsed CSV data to be checked.
	 * @return true if the type of the given row is "image", false otherwise.
	 */
	bool isTypeImage(int);
	/**
	 * Checks if the schema type at the specified row is a "radiobutt".
	 * This method compares the value in the `COL_TYPE` column of the row
	 * with the string "radiobutt" to determine if the type is a radio button.
	 *
	 * @param iRow The row index to check in the parsed data.
	 * @return True if the type in the specified row is "radiobutt", false otherwise.
	 */
	bool isTypeRadioButton(int);
	/**
	 * Checks whether the row at the given index corresponds to a "text" type.
	 *
	 * @param iRow The index of the row to check in the parsed CSV data.
	 * @return True if the type of the specified row is "text", false otherwise.
	 */
	bool isTypeText(int);
	/**
	 * Checks if the type of the specified row in the CSV dataset is "password".
	 *
	 * Compares the value in the "Type" column of the given row (indexed by iRow)
	 * against the string "password" to determine if the row corresponds to a
	 * password type.
	 *
	 * @param iRow The index of the row in the CSV dataset to check.
	 * @return True if the type of the specified row is "password", otherwise false.
	 */
	bool isTypePassword(int);

	/**
	 * A boolean variable indicating whether the current schema row is of type "Image"
	 * and should be handled accordingly within the schema processing logic.
	 *
	 * This variable is set to true during schema processing if the system identifies
	 * the type of the target row as "Image" (as determined by `isTypeImage(int)`).
	 * It is used to enable actions and logic specifically related to handling
	 * image-related schema rows.
	 */
	bool m_bHandleImage;
	/**
	 * A boolean flag used to determine if the "Password" type should be handled.
	 *
	 * This variable is set to `true` during the schemaCompiler constructor,
	 * indicating that password-type data needs to be processed. Its value
	 * is specifically checked and updated in conjunction with the `isTypePassword` method,
	 * which determines if the current row matches the criteria for a password type.
	 */
	bool m_bHandlePassword;
	/**
	 * @brief Indicates whether the post-checkbox type will be handled.
	 *
	 * This boolean member variable determines if the application should process data or behavior
	 * specific to the post-checkbox type during runtime. It is initialized to true within the constructor
	 * of the schemaCompiler class. The value may be utilized in conjunction with isTypePostCheckbox
	 * to perform operations on rows categorized as post-checkbox types.
	 */
	bool m_bHandlePostCheckbox;
	/**
	 * A boolean variable used to indicate whether the program should handle pre-checkbox types.
	 * It is set to `true` in the constructor of the `schemaCompiler` class and allows the handling
	 * of rows that are identified as a "pre-checkbox" type.
	 *
	 * This variable is specifically utilized in conjunction with the `isTypePreCheckbox(int iRow)`
	 * method to conditionally process rows that meet the criteria of a pre-checkbox type.
	 */
	bool m_bHandlePreCheckbox;
	/**
	 * @brief Indicates whether radio button handling logic is enabled.
	 *
	 * This variable is used to determine whether the schema processing
	 * includes actions for handling radio button types. It is typically set
	 * to true when a radio button type is detected in the schema data and
	 * related functionalities are to be executed.
	 */
	bool m_bHandleRadioButton;
	/**
	 * Indicates whether text elements should be handled, such as processing or validation of text inputs.
	 *
	 * This variable is typically set within the constructor or during runtime to determine if specific
	 * operations related to text input handling are to be executed. It is associated with logic like
	 * checking if a row corresponds to a text type (`isTypeText`).
	 */
	bool m_bHandleText;
	/**
	 * Indicates whether text area handling is enabled.
	 *
	 * This member variable is used to determine if the system or component
	 * is configured to handle specific operations or processes associated
	 * with text areas. Its value can be set based on requirements or
	 * conditions during runtime or initialization.
	 */
	bool m_bHandleTextArea;
};

////////////////////////////
// eof - schemaCompiler.h //
////////////////////////////
