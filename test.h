/////////////////////////////////////////////////////////////////////////
// daphne.goodall.com:/home/devo/public_html/fw/test.h 2025/01/10      //
// Copyright (c) 2021-2025 Douglas Wade Goodall. All Rights Reserved.  //
/////////////////////////////////////////////////////////////////////////

#ifndef FW_TEST_H
#define FW_TEST_H

#include "mwfw2.h"

enum {
    TEST0 = 1<<0,
    TEST1 = 1 << 1,
    TEST2 = 1 << 2,
    TEST2_1 = 1 << 3,
    TEST3 = 1 << 4,
    TEST5 = 1 << 5,
    NUM_TESTS = 6
};

/**
 * @class test
 * @brief The test class is designed to manage and perform various test operations, log their performances,
 *        and execute self-contained unit tests for different system functionalities.
 */
class test {
	/**
	 * Holds the fully qualified file system path of a log file.
	 *
	 * This member variable is used to store the file path generated by the `genLogFQFS` method from
	 * the `osIface` interface, which calculates the file path based on the current file and
	 * function information. The path is typically used for logging purposes in various test-related
	 * operations.
	 *
	 * The size of the character array is defined by the macro `FILENAME_MAX`, ensuring it can handle
	 * paths of the maximum allowable length on the platform in use.
	 */
	char m_szLogFQFS[FILENAME_MAX];
	/**
	 * Pointer to an instance of the CSysLog class used for system logging.
	 *
	 * This member variable is responsible for handling logging operations
	 * throughout the `test` class. It is dynamically allocated during the
	 * construction of a `test` object and serves for recording various
	 * runtime details and events, such as informing about test execution
	 * status and results.
	 *
	 * The CSysLog instance is used to log informational messages
	 * using the `loginfo` method. Proper cleanup of this resource is
	 * expected when the `test` class is destroyed.
	 */
	CSysLog * m_pSysLog;
	/**
	 * A boolean flag used to enable or disable debug mode within the `test` class.
	 *
	 * When set to `true`, debug-specific functionality or logging may be triggered,
	 * providing additional runtime information useful for diagnostics or development purposes.
	 * When set to `false`, the class operates in a non-debug mode with standard behavior.
	 */
	bool m_bDebug;
    
public:

	/**
	 * Constructor for the test class. Initializes logging, shared memory
	 * attributes related to test metrics, starts the test processes,
	 * and records the start time. Calls runMandatoryTests to execute
	 * predefined test cases.
	 *
	 * @param bDebug Indicates whether debugging mode is enabled. If true,
	 *               debug-related logging actions are performed.
	 * @param bCGI Determines whether the tests are executed in a CGI
	 *             (Common Gateway Interface) environment. Adjusts test
	 *             logic based on this flag.
	 * @return None.
	 */
	test(bool bDebug, bool bCGI);

	/**
	 * Executes a set of mandatory tests and updates internal states to track the
	 * test results such as passed, failed, and skipped tests.
	 *
	 * @param bCGI A boolean flag indicating whether to include CGI-specific
	 * tests in the execution. If true, CGI tests will be performed; otherwise,
	 * they will be skipped.
	 *
	 * @return A boolean value indicating whether all mandatory tests passed.
	 * Returns true if all tests were successful, false if any test failed.
	 */
	bool runMandatoryTests(bool bCGI);

	/**
	 * Executes a series of unit tests for various system functionalities, including HTTP, HTTPS,
	 * shared regions, CGI, and additional features related to system functionality.
	 *
	 * @param bCGI Boolean flag indicating whether to include CGI-related tests in the test suite.
	 * @return True if all tests pass successfully; False if any test fails.
	 */
	bool runAllTests(bool bCGI);

	/**
	 * Logs the histograms and relevant details related to the test cases.
	 *
	 * This function retrieves data from the shared memory structure and logs the following details:
	 * - Number of tests processed.
	 * - Number of tests passed.
	 * - Number of tests failed.
	 * - Number of tests skipped.
	 *
	 * Additionally, it iterates through all test cases and logs the names of the tests that were:
	 * - Processed.
	 * - Passed.
	 * - Failed.
	 * - Skipped.
	 */
	void logHistograms();

    bool test0(); /**
     * This method verifies the HTTP read functionality by generating an HTML file
     * through the system command, reading its content from a specific file, and
     * validating the beginning of the document structure. The function determines
     * whether the test passes or fails based on the comparison result.
     *
     * @return true if the HTTP read successfully verifies against expected content;
     *         false otherwise.
     */

	/**
	 *
	 */
    bool test1();

	/**
	 * Executes test2 which verifies HTTPS read functionality.
	 *
	 * This method generates an HTTPS URL using a specific test page, invokes
	 * the system command to test the URL, and checks the output stored in a file.
	 * It validates the response to confirm if the content starts with a valid
	 * HTML document type definition (e.g., "<!DOCTYPE").
	 *
	 * @return true if the file contains valid HTML starting with "<!DOCTYPE"; false otherwise.
	 */
	bool test2();

	/**
	 * Analyzes shared memory segments based on IPC data and verifies the shared region version.
	 *
	 * This method parses the output of the `ipcs` system command to identify and validate
	 * shared memory segments. It searches for specific shared memory regions by analyzing
	 * relevant details and logs operations for debugging purposes. In case the required
	 * key is not found during the scan, the method returns false.
	 *
	 * @param bDebug A boolean flag indicating whether debug information should be logged.
	 *               If set to true, additional logging details will be provided to assist
	 *               in debugging the process.
	 * @return Returns true if the shared memory region verification is successful; otherwise,
	 *         returns false if the key is not found or an error occurs during parsing.
	 */
	bool test2_1(bool);

	/**
	 * Executes and verifies the CGI functionality.
	 * If CGI mode is enabled, directly returns success. Otherwise, it
	 * executes a test CGI script and validates its output for correctness.
	 *
	 * @param bDebug Specifies whether debug mode is enabled, which may
	 *               alter the logging or behavior depending on the flag state.
	 * @param bCGI   Specifies whether CGI functionality is enabled.
	 *               When true, the function will bypass the execution
	 *               of the CGI script and directly return success.
	 * @return Returns true if the CGI functionality verification succeeds,
	 *         otherwise returns false.
	 */
	bool test3(bool bDebug, bool bCGI);

	/**
	 * Verifies the functionality of log generation and validation by creating a log file
	 * with a unique identifier, reading the contents, and checking if the unique identifier
	 * matches a predefined value.
	 *
	 * @param pszFile The source file name from which the method is called.
	 * @param pszFunction The function name in which the method is called.
	 * @param bDebug A boolean flag indicating whether the method should run in debug mode.
	 * @return true if the unique identifier is successfully logged and verified; false otherwise.
	 */
	bool test5(const char *, const char *, bool bDebug);

	/**
	 * Destructor for the `test` class.
	 *
	 * This method cleans up resources or performs any necessary termination processes
	 * when an instance of the `test` class is destroyed. It ensures proper resource
	 * management, such as releasing memory or other resources allocated during the
	 * lifetime of the object.
	 *
	 * If a `CSysLog` instance is associated with this object, it is expected that it
	 * will be properly cleaned up to prevent resource leaks.
	 */
	~test();
};


#endif //FW_TEST_H
